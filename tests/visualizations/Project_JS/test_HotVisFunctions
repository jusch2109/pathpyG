import pathpyG as pp
from pathpyG.visualisations.Project_JS.HotVisFunctions import *

def create_test_data():
    tedges = [('a', 'b', 1),('a', 'b', 2), ('b', 'a', 3), ('b', 'c', 3), ('d', 'c', 4), ('a', 'b', 4), ('c', 'b', 4),
              ('c', 'd', 5), ('b', 'a', 5), ('c', 'b', 6), ('a', 'c', 6), ('b', 'd', 6), ('a', 'd', 6)]
    test_graph = pp.TemporalGraph.from_edge_list(tedges)
    test_layout= {'a':[0,0], 'b':[1,0], 'c':[0,1], 'd':[1,1]}

    # create PathData object with same structure
    m = pp.MultiOrderModel.from_temporal_graph(test_graph, 1, 6, cached=True)
    test_paths = pp.PathData(test_graph.mapping)

    for i in range(2,7):
        for node in list(m.layers[i].nodes):
            if(len(list(node)) == len(set(list(node)))):
                test_paths.append_walk(list(node))

    return test_graph, test_paths, test_layout


def test_barycentre():
    assert torch.allclose(barycentre({'a':[0,0], 'b':[1,0], 'c':[0,1], 'd':[1,1]}).float(), torch.Tensor([0.5000, 0.5000]))
    assert torch.allclose(barycentre({'a':[0,0], 'b':[1,0], 'c':[0,1], 'd':[1,1]}, ['a']).float(), torch.Tensor([0.0, 0.0]))

def test_closeness_centrality_paths():
    t_g, test_paths, t_l = create_test_data()
    cc = closeness_centrality_paths(test_paths)
    assert set(cc.keys()) == {"a", "b", "c", "d"}
    assert round(cc['a'],2) == 2.62
    assert round(cc['b'],2) == 2.46
    assert round(cc['c'],2) == 2.08
    assert round(cc['d'],2) == 2.20

def test_closeness_eccentricity():
    t_g, t_p, t_l = create_test_data()
    ce =closeness_eccentricity(t_p, t_l, percentile=0.1, delta=1)
    assert ce == 1.0

def test_causal_path_dispersion():
    t_g, t_p, t_l = create_test_data()
    t_p = pp.PathData(t_g.mapping)
    t_p.append_walk(['a', 'b'])
    t_p.append_walk(['a', 'c'])
    t_p.append_walk(['a', 'd'])
    t_p.append_walk(['b', 'a'])
    t_p.append_walk(['b', 'c'])
    t_p.append_walk(['b', 'd'])
    t_p.append_walk(['c', 'b'])
    t_p.append_walk(['c', 'd'])
    t_p.append_walk(['d', 'c'])
    t_p.append_walk(['c', 'b', 'a'])
    assert round(causal_path_dispersion(t_p, t_l).item(), 2) == 0.82 

def test_edge_crossing():
    t_g, t_p, t_l = create_test_data()
    assert edge_crossing(t_g, t_l) == 1.0

def test_cluster_distance_ratio():
    t_g, t_p, t_l = create_test_data()
    cluster = [['a', 'b'], ['c', 'd']]
    cdr = cluster_distance_ratio(t_g, cluster, t_l)
    assert round(cdr[0].item(), 3) == 0.618
    assert round(cdr[1].item(), 3) == 0.618
