[build-system]
# requires = [
#     "setuptools >= 65",
#     "wheel >= 0.38",
# ]
# build-backend = "setuptools.build_meta"

requires = ["flit"]
build-backend = "flit.buildapi"

[project]
name = "pathpyG"
authors = [
    { name = "Ingo Scholtes", email = "ingo.scholtes@uni-wuerzburg.de" },
    { name = "JÃ¼rgen Hackl", email = "hackl@princeton.edu" },
]
description = "An Open Source package providing higher-order analytics and learning for time series data on graphs."
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Environment :: GPU :: NVIDIA CUDA :: 11.7",
    "Environment :: GPU :: NVIDIA CUDA :: 11.8",
]
requires-python = ">=3.8" # PyTorch Geometric requires Python 3.8 or higher
dynamic = ["version"]
dependencies = [
    'singledispatchmethod', # Adds decorator that allows to use different methods for different types of arguments (similar to method overloading in Java)
    'zstandard',            # Compression library
    'numpy',                # Numerical computing library
    'scipy',                # Scientific computing library
    'scikit-learn',         # Machine learning library
    'pandas',               # Data analysis library
    'matplotlib',           # Plotting library
    'seaborn',              # High-level plotting library
]

[project.optional-dependencies]
test = [
    "pytest",      # Testing framework
    "pytest-cov",  # Code coverage plugin for pytest
    "pytest-mock", # Mocking plugin for pytest
]

dev = [
    "flake8",            # Linter
    "flake8-pyproject",  # Enables flake8 to read pyproject.toml
    "flake8-docstrings", # Docstring style checker
    "flake8-bugbear",    # Additional flake8 rules to find common bugs
    "pylint",            # Another linter with mostly different rules
    "black",             # Code formatter
    "pre-commit",        # Python package to enable GitHub pre-commit hooks
    "pathpy2",           # Old pathpy version for comparisons
    "pyright",           # Static type checker
    "jupyter",           # To run the tutorial notebooks
]

[project.urls]
Documentation = "https://github.com/pathpy/pathpyG/blob/main/README.md" # TODO: Update to official documentation
Source = "https://github.com/pathpy/pathpyG"
Tracker = "https://github.com/pathpy/pathpyG/issues"

########################################################################################
########################### Build system configuration #################################
########################################################################################

[build-system]
requires = ["flit"]
build-backend = "flit.buildapi"

[tool.flit.module]
name = "pathpyG"

########################################################################################
############################# Test configuration #######################################
########################################################################################

[tool.pytest.ini_options] # TODO: 10. Create pytest setup
pythonpath = ["src"]
testpaths = "tests"

[tool.coverage.run] # TODO: 10. Create pytest setup
branch = true

[tool.coverage.report] # TODO: 10. Create pytest setup
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug",
    "if settings.DEBUG",
    "if TYPE_CHECKING",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

########################################################################################
############################# Linting configuration ####################################
########################################################################################

[tool.flake8] # Linter and code style checker
max-line-length = 88
extend-ignore = "E203"                # whitespace before ':' conflicts with black
per-file-ignores = "__init__.py:F401" # Ignore unused imports in __init__.py files

[tool.pylint.format] # Linter
max-line-length = 88

[tool.pyright] # Static type checker
include = ["src"]

[tool.mypy] # Static type checker
modules = ["pathpyG"]
ignore_missing_imports = true

########################################################################################
############################# Formatting configuration #################################
########################################################################################

[tool.isort] # Sorts imports
profile = "black"
skip = [".gitignore", "__init__.py"]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov src --cov-fail-under 0 --cov-append -m 'not integration'"
pythonpath = [
  "src"
]
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "spark: marks tests which need Spark",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py, integration, spark, all

[testenv]
commands =
    pytest -m "not integration and not spark" {posargs}

[testenv:integration]
commands =
    pytest -m "integration" {posargs}

[testenv:spark]
extras = spark
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest -m "spark" {posargs}

[testenv:all]
extras = all
setenv =
       PYSPARK_DRIVER_PYTHON = {envpython}
       PYSPARK_PYTHON = {envpython}
commands =
    pytest {posargs}
"""

[tool.pylint]
extension-pkg-whitelist= [
    "numpy",
    "torch",
    "cv2",
    "pyodbc",
    "pydantic",
    "ciso8601",
    "netcdf4",
    "scipy"
]
ignore="CVS"
ignore-patterns="test.*?py,conftest.py"
init-hook='import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs=0
limit-inference-results=100
persistent="yes"
suggestion-mode="yes"
unsafe-load-any-extension="no"

[tool.pylint.'MESSAGES CONTROL']
enable="c-extension-no-member"

[tool.pylint.'REPORTS']
evaluation="10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format="text"
reports="no"
score="yes"

[tool.pylint.'REFACTORING']
max-nested-blocks=5
never-returning-functions="sys.exit"

[tool.pylint.'BASIC']
argument-naming-style="snake_case"
attr-naming-style="snake_case"
bad-names= [
    "foo",
    "bar"
]
class-attribute-naming-style="any"
class-naming-style="PascalCase"
const-naming-style="UPPER_CASE"
docstring-min-length=-1
function-naming-style="snake_case"
good-names= [
    "i",
    "j",
    "k",
    "ex",
    "Run",
    "_"
]
include-naming-hint="yes"
inlinevar-naming-style="any"
method-naming-style="snake_case"
module-naming-style="any"
no-docstring-rgx="^_"
property-classes="abc.abstractproperty"
variable-naming-style="snake_case"

[tool.pylint.'FORMAT']
ignore-long-lines="^\\s*(# )?.*['\"]?<?https?://\\S+>?"
indent-after-paren=4
indent-string='    '
max-line-length=120
max-module-lines=1000
single-line-class-stmt="no"
single-line-if-stmt="no"

[tool.pylint.'LOGGING']
logging-format-style="old"
logging-modules="logging"

[tool.pylint.'MISCELLANEOUS']
notes= [
    "FIXME",
    "XXX",
    "TODO"
]

[tool.pylint.'SIMILARITIES']
ignore-comments="yes"
ignore-docstrings="yes"
ignore-imports="yes"
min-similarity-lines=7

[tool.pylint.'SPELLING']
max-spelling-suggestions=4
spelling-store-unknown-words="no"

[tool.pylint.'STRING']
check-str-concat-over-line-jumps="no"

[tool.pylint.'TYPECHECK']
contextmanager-decorators="contextlib.contextmanager"
generated-members="numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members="yes"
ignore-none="yes"
ignore-on-opaque-inference="yes"
ignored-classes="optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules="numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint="yes"
missing-member-hint-distance=1
missing-member-max-choices=1

[tool.pylint.'VARIABLES']
additional-builtins="dbutils"
allow-global-unused-variables="yes"
callbacks= [
    "cb_",
    "_cb"
]
dummy-variables-rgx="_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names="_.*|^ignored_|^unused_"
init-import="no"
redefining-builtins-modules="six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.'CLASSES']
defining-attr-methods= [
    "__init__",
    "__new__",
    "setUp",
    "__post_init__"
]
exclude-protected= [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make"
]
valid-classmethod-first-arg="cls"
valid-metaclass-classmethod-first-arg="cls"

[tool.pylint.'DESIGN']
max-args=5
max-attributes=7
max-bool-expr=5
max-branches=12
max-locals=15
max-parents=7
max-public-methods=20
max-returns=6
max-statements=50
min-public-methods=2

[tool.pylint.'IMPORTS']
allow-wildcard-with-all="no"
analyse-fallback-blocks="no"
deprecated-modules="optparse,tkinter.tix"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions= [
    "BaseException",
    "Exception"
]

[tool.mypy]
files = ["pathpyG"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"
ignore_missing_imports = "True"
