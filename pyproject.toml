[build-system]
requires = ["flit"]
build-backend = "flit.buildapi"

[project]
name = "pathpyG"
authors = [
    { name = "Ingo Scholtes", email = "ingo.scholtes@uni-wuerzburg.de" },
    { name = "JÃ¼rgen Hackl", email = "hackl@princeton.edu" },
]
description = "An Open Source package providing higher-order analytics and learning for time series data on graphs."
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Environment :: GPU :: NVIDIA CUDA :: 11.7",
    "Environment :: GPU :: NVIDIA CUDA :: 11.8",
]
requires-python = ">=3.8" # PyTorch Geometric requires Python 3.8 or higher
dynamic = ["version"]
dependencies = [
    'singledispatchmethod', # Adds decorator that allows to use different methods for different types of arguments (similar to method overloading in Java)
    'zstandard',            # Compression library
    'numpy',                # Numerical computing library
    'scipy',                # Scientific computing library
    'scikit-learn',         # Machine learning library
    'pandas',               # Data analysis library
    'matplotlib',           # Plotting library
    'seaborn',              # High-level plotting library
]

[project.optional-dependencies]
test = [
    "pytest",      # Testing framework
    "pytest-cov",  # Code coverage plugin for pytest
    "pytest-mock", # Mocking plugin for pytest
]

dev = [
    "flake8",            # Linter
    "flake8-pyproject",  # Enables flake8 to read pyproject.toml
    "flake8-docstrings", # Docstring style checker
    "flake8-bugbear",    # Additional flake8 rules to find common bugs
    "pylint",            # Another linter with mostly different rules
    "black",             # Code formatter
    "pre-commit",        # Python package to enable GitHub pre-commit hooks
    "pathpy2",           # Old pathpy version for comparisons
    "jedi",              # TODO: This was in the dev container dockerfile, not sure if it's needed
    "pyright",           # Static type checker
    "jupyter",           # To run the tutorial notebooks
]

[project.urls]
Documentation = "https://github.com/pathpy/pathpyG/blob/main/README.md" # TODO: Update to official documentation
Source = "https://github.com/pathpy/pathpyG"
Tracker = "https://github.com/pathpy/pathpyG/issues"

[tool.flit.module]
name = "pathpyG"

[tool.flake8] # TODO: Set up linting
max-line-length = 120

[tool.pyright] # TODO: Set up linting
include = ["src"]

[tool.pylint] # TODO: Set up linting

[tool.mypy] # Static type checker
modules = ["pathpyG"]
ignore_missing_imports = true

[tool.pytest.ini_options] # TODO: 10. Create pytest setup
pythonpath = ["src"]
testpaths = "tests"

[tool.coverage.run] # TODO: 10. Create pytest setup
branch = true

[tool.coverage.report] # TODO: 10. Create pytest setup
fail_under = 100
